{
  "version": 3,
  "sources": [
    "../../lib/widget/widget-script.js"
  ],
  "sourcesContent": [
    "/**\n * Marlin Chat Widget - Embeddable Script\n * This script is designed to be embedded via Google Tag Manager\n * Version: 0.1.0\n */\n\n// Use IIFE to avoid polluting global namespace\n(function() {\n  // Check if the widget is already loaded\n  if (window.marlinChatWidgetLoaded) {\n    console.warn('Marlin Chat Widget already loaded. Skipping initialization.');\n    return;\n  }\n\n  // Set flag to prevent multiple initializations\n  window.marlinChatWidgetLoaded = true;\n\n  /**\n   * Widget configuration defaults\n   */\n  const DEFAULT_CONFIG = {\n    position: 'bottom-right',\n    title: 'Ask Marlan',\n    primaryColor: '#0070f3',\n    bubbleIcon: null, // Optional custom icon URL\n    apiEndpoint: 'https://marlan.photographytoprofits.com/api/widget-chat',\n    width: '350px',\n    height: '500px',\n    zIndex: 9999\n  };\n\n  /**\n   * Create and inject widget styles\n   */\n  function injectStyles() {\n    const styleEl = document.createElement('style');\n    styleEl.id = 'marlin-chat-widget-styles';\n    styleEl.innerHTML = `\n      .marlin-chat-widget-container {\n        position: fixed;\n        z-index: ${config.zIndex};\n        max-height: ${config.height};\n        width: ${config.width};\n        display: flex;\n        flex-direction: column;\n        background-color: #ffffff;\n        border-radius: 12px;\n        box-shadow: 0 4px 24px rgba(0, 0, 0, 0.15);\n        overflow: hidden;\n        transition: all 0.3s ease;\n        opacity: 0;\n        transform: translateY(20px);\n      }\n\n      .marlin-chat-widget-container.open {\n        opacity: 1;\n        transform: translateY(0);\n      }\n\n      .marlin-chat-widget-header {\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n        padding: 12px 16px;\n        background-color: ${config.primaryColor};\n        color: #ffffff;\n      }\n\n      .marlin-chat-widget-title {\n        font-size: 16px;\n        font-weight: 600;\n        margin: 0;\n      }\n\n      .marlin-chat-widget-close {\n        background: none;\n        border: none;\n        color: #ffffff;\n        cursor: pointer;\n        font-size: 18px;\n      }\n\n      .marlin-chat-widget-messages {\n        flex: 1;\n        overflow-y: auto;\n        padding: 16px;\n        display: flex;\n        flex-direction: column;\n        gap: 12px;\n      }\n\n      .marlin-chat-widget-input-container {\n        padding: 12px;\n        border-top: 1px solid #e5e7eb;\n        display: flex;\n        align-items: center;\n      }\n\n      .marlin-chat-widget-input {\n        flex: 1;\n        border: 1px solid #e5e7eb;\n        border-radius: 8px;\n        padding: 8px 12px;\n        font-size: 14px;\n        outline: none;\n      }\n\n      .marlin-chat-widget-send {\n        background-color: ${config.primaryColor};\n        border: none;\n        border-radius: 8px;\n        color: #ffffff;\n        cursor: pointer;\n        padding: 8px 12px;\n        margin-left: 8px;\n      }\n\n      .marlin-chat-widget-bubble {\n        position: fixed;\n        z-index: ${config.zIndex};\n        width: 60px;\n        height: 60px;\n        border-radius: 50%;\n        background-color: ${config.primaryColor};\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        cursor: pointer;\n        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n        transition: all 0.3s ease;\n      }\n\n      .marlin-chat-widget-bubble:hover {\n        transform: scale(1.05);\n      }\n\n      .marlin-chat-widget-message {\n        max-width: 80%;\n        padding: 10px 14px;\n        border-radius: 16px;\n        font-size: 14px;\n        line-height: 1.5;\n        white-space: pre-wrap;\n      }\n\n      .marlin-chat-widget-message br {\n        display: block;\n        margin-bottom: 5px;\n        content: \"\";\n      }\n\n      .marlin-chat-widget-message ul, \n      .marlin-chat-widget-message ol {\n        padding-left: 20px;\n        margin: 8px 0;\n      }\n\n      .marlin-chat-widget-message li {\n        margin-bottom: 4px;\n      }\n\n      .marlin-chat-widget-message.user {\n        align-self: flex-end;\n        background-color: ${config.primaryColor};\n        color: #ffffff;\n        border-bottom-right-radius: 4px;\n      }\n\n      .marlin-chat-widget-message.assistant {\n        align-self: flex-start;\n        background-color: #f3f4f6;\n        color: #111827;\n        border-bottom-left-radius: 4px;\n      }\n\n      /* Position variations */\n      .marlin-chat-widget-container.bottom-right, .marlin-chat-widget-bubble.bottom-right {\n        bottom: 20px;\n        right: 20px;\n      }\n\n      .marlin-chat-widget-container.bottom-left, .marlin-chat-widget-bubble.bottom-left {\n        bottom: 20px;\n        left: 20px;\n      }\n\n      .marlin-chat-widget-container.top-right, .marlin-chat-widget-bubble.top-right {\n        top: 20px;\n        right: 20px;\n      }\n\n      .marlin-chat-widget-container.top-left, .marlin-chat-widget-bubble.top-left {\n        top: 20px;\n        left: 20px;\n      }\n\n      /* Loading indicator */\n      .marlin-chat-widget-typing {\n        display: flex;\n        align-items: center;\n        gap: 4px;\n        padding: 4px 10px;\n        border-radius: 12px;\n        background-color: #f3f4f6;\n        max-width: fit-content;\n        align-self: flex-start;\n      }\n\n      .marlin-chat-widget-typing-dot {\n        width: 6px;\n        height: 6px;\n        border-radius: 50%;\n        background-color: #6b7280;\n        animation: typingAnimation 1s infinite ease-in-out;\n      }\n\n      .marlin-chat-widget-typing-dot:nth-child(1) {\n        animation-delay: 0s;\n      }\n\n      .marlin-chat-widget-typing-dot:nth-child(2) {\n        animation-delay: 0.2s;\n      }\n\n      .marlin-chat-widget-typing-dot:nth-child(3) {\n        animation-delay: 0.4s;\n      }\n\n      @keyframes typingAnimation {\n        0%, 100% {\n          transform: translateY(0);\n        }\n        50% {\n          transform: translateY(-4px);\n        }\n      }\n    `;\n    document.head.appendChild(styleEl);\n  }\n\n  /**\n   * Create widget DOM elements\n   */\n  function createWidgetElements() {\n    // Chat bubble\n    const bubble = document.createElement('div');\n    bubble.className = `marlin-chat-widget-bubble ${config.position}`;\n    bubble.innerHTML = config.bubbleIcon ? \n      `<img src=\"${config.bubbleIcon}\" alt=\"Chat\" width=\"30\" height=\"30\">` : \n      '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" color=\"#ffffff\"><path d=\"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z\"></path></svg>';\n    document.body.appendChild(bubble);\n\n    // Chat container\n    const container = document.createElement('div');\n    container.className = `marlin-chat-widget-container ${config.position}`;\n    container.style.display = 'none';\n    \n    // Header\n    const header = document.createElement('div');\n    header.className = 'marlin-chat-widget-header';\n    header.innerHTML = `\n      <h3 class=\"marlin-chat-widget-title\">${config.title}</h3>\n      <button class=\"marlin-chat-widget-close\">&times;</button>\n    `;\n    \n    // Messages container\n    const messagesContainer = document.createElement('div');\n    messagesContainer.className = 'marlin-chat-widget-messages';\n    \n    // Input container\n    const inputContainer = document.createElement('div');\n    inputContainer.className = 'marlin-chat-widget-input-container';\n    inputContainer.innerHTML = `\n      <input type=\"text\" class=\"marlin-chat-widget-input\" placeholder=\"Type your message...\">\n      <button class=\"marlin-chat-widget-send\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><line x1=\"22\" y1=\"2\" x2=\"11\" y2=\"13\"></line><polygon points=\"22 2 15 22 11 13 2 9 22 2\"></polygon></svg>\n      </button>\n    `;\n    \n    // Assemble the widget\n    container.appendChild(header);\n    container.appendChild(messagesContainer);\n    container.appendChild(inputContainer);\n    document.body.appendChild(container);\n    \n    return {\n      bubble,\n      container,\n      messagesContainer,\n      closeButton: header.querySelector('.marlin-chat-widget-close'),\n      input: inputContainer.querySelector('.marlin-chat-widget-input'),\n      sendButton: inputContainer.querySelector('.marlin-chat-widget-send')\n    };\n  }\n\n  /**\n   * Add a message to the chat\n   */\n  function addMessage(text, role = 'assistant') {\n    const message = document.createElement('div');\n    message.className = `marlin-chat-widget-message ${role}`;\n    \n    // Replace line breaks with <br> tags and preserve formatting\n    message.innerHTML = text.replace(/\\n/g, '<br>');\n    \n    elements.messagesContainer.appendChild(message);\n    elements.messagesContainer.scrollTop = elements.messagesContainer.scrollHeight;\n  }\n\n  /**\n   * Show typing indicator\n   */\n  function showTyping() {\n    const typing = document.createElement('div');\n    typing.className = 'marlin-chat-widget-typing';\n    typing.innerHTML = `\n      <div class=\"marlin-chat-widget-typing-dot\"></div>\n      <div class=\"marlin-chat-widget-typing-dot\"></div>\n      <div class=\"marlin-chat-widget-typing-dot\"></div>\n    `;\n    typing.id = 'marlin-chat-widget-typing';\n    elements.messagesContainer.appendChild(typing);\n    elements.messagesContainer.scrollTop = elements.messagesContainer.scrollHeight;\n  }\n\n  /**\n   * Hide typing indicator\n   */\n  function hideTyping() {\n    const typing = document.getElementById('marlin-chat-widget-typing');\n    if (typing) {\n      typing.remove();\n    }\n  }\n\n  /**\n   * Toggle chat widget visibility\n   */\n  function toggleWidget() {\n    const isVisible = elements.container.style.display !== 'none';\n    \n    if (isVisible) {\n      elements.container.classList.remove('open');\n      setTimeout(() => {\n        elements.container.style.display = 'none';\n      }, 300);\n    } else {\n      elements.container.style.display = 'flex';\n      setTimeout(() => {\n        elements.container.classList.add('open');\n        // Focus input field\n        elements.input.focus();\n      }, 10);\n    }\n  }\n\n  /**\n   * Get or create a session ID for the user\n   */\n  function getSessionId() {\n    let sessionId = localStorage.getItem('marlin-chat-session-id');\n    \n    if (!sessionId) {\n      sessionId = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n        const r = Math.random() * 16 | 0;\n        const v = c === 'x' ? r : (r & 0x3 | 0x8);\n        return v.toString(16);\n      });\n      localStorage.setItem('marlin-chat-session-id', sessionId);\n    }\n    \n    return sessionId;\n  }\n\n  /**\n   * Send message to API\n   */\n  async function sendMessage(text) {\n    if (!text.trim()) return;\n    \n    // Add user message to chat\n    addMessage(text, 'user');\n    \n    // Clear input\n    elements.input.value = '';\n    \n    // Show typing indicator\n    showTyping();\n    \n    try {\n      const sessionId = getSessionId();\n      \n      // Enhanced logging for debugging\n      console.log('Widget sending message to API:', {\n        message: text,\n        messageLength: text.length,\n        messageType: typeof text,\n        sessionId: sessionId,\n        endpoint: config.apiEndpoint\n      });\n      \n      const response = await fetch(config.apiEndpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message: text,\n          sessionId\n        })\n      });\n      \n      // Log response headers for debugging\n      console.log('Response status:', response.status);\n      console.log('Response content-type:', response.headers.get('content-type'));\n      if (!response.ok) {\n        // Try to get more detailed error info\n        const responseText = await response.text();\n        console.error('API error response:', responseText);\n        try {\n          const errorData = JSON.parse(responseText);\n          console.error('API error parsed:', errorData);\n          hideTyping();\n          \n          // Use the error message from the response if available\n          const errorMessage = errorData.message || errorData.error || `Error: ${response.status} ${response.statusText}`;\n          addMessage(`Sorry, there was a problem: ${errorMessage}. Please try again later.`, 'assistant');\n        } catch (parseError) {\n          // If we can't parse the error JSON, show a generic message\n          console.error('Failed to parse error response:', parseError);\n          hideTyping();\n          addMessage(`Sorry, there was an error (${response.status}). Please try again later.`, 'assistant');\n        }\n        return;\n      }\n      \n      // Handle text streaming - simpler now with toTextStreamResponse()\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder();\n      \n      hideTyping();\n      const message = document.createElement('div');\n      message.className = 'marlin-chat-widget-message assistant';\n      elements.messagesContainer.appendChild(message);\n      \n      let responseText = '';\n      \n      try {\n        while (true) {\n          const { done, value } = await reader.read();\n          if (done) {\n            console.log('Stream complete');\n            break;\n          }\n          \n          // Text streaming is clean now, no need to filter protocol markers\n          const chunk = decoder.decode(value, { stream: true });\n          console.log('Received chunk:', JSON.stringify(chunk));\n          \n          if (chunk.trim()) {\n            responseText += chunk;\n            // Use innerHTML instead of textContent to preserve line breaks\n            message.innerHTML = responseText.replace(/\\n/g, '<br>');\n            elements.messagesContainer.scrollTop = elements.messagesContainer.scrollHeight;\n          }\n        }\n        \n        // Final decode to ensure we get the last chunk\n        const finalChunk = decoder.decode();\n        if (finalChunk.trim()) {\n          console.log('Final chunk:', JSON.stringify(finalChunk));\n          responseText += finalChunk;\n          // Use innerHTML instead of textContent to preserve line breaks\n          message.innerHTML = responseText.replace(/\\n/g, '<br>');\n        }\n        \n        // If empty response, show fallback message\n        if (!responseText.trim()) {\n          console.warn('Empty response received from streaming API');\n          message.innerHTML = \"I'm sorry, I couldn't find specific information about that in my knowledge base. Please try asking in a different way or about another topic.\";\n        }\n        \n        console.log('Final response text:', responseText);\n      } catch (streamError) {\n        console.error('Error processing stream:', streamError);\n        message.innerHTML = \"Sorry, there was an error processing the response stream. Please try again.\";\n      }\n    } catch (error) {\n      console.error('Error sending message:', error);\n      hideTyping();\n      addMessage('Sorry, there was an error connecting to the server. Please check your connection and try again later.', 'assistant');\n    }\n  }\n\n  /**\n   * Initialize event listeners\n   */\n  function initEventListeners() {\n    // Toggle chat on bubble click\n    elements.bubble.addEventListener('click', toggleWidget);\n    \n    // Close chat on close button click\n    elements.closeButton.addEventListener('click', toggleWidget);\n    \n    // Send message on button click\n    elements.sendButton.addEventListener('click', () => {\n      sendMessage(elements.input.value);\n    });\n    \n    // Send message on Enter key\n    elements.input.addEventListener('keypress', (e) => {\n      if (e.key === 'Enter') {\n        sendMessage(elements.input.value);\n      }\n    });\n  }\n\n  /**\n   * Initialize the widget\n   */\n  function init(userConfig = {}) {\n    // Merge default config with user config\n    config = { ...DEFAULT_CONFIG, ...userConfig };\n    \n    // Create styles and DOM elements\n    injectStyles();\n    elements = createWidgetElements();\n    \n    // Add welcome message\n    addMessage('I'm your Mastermind AI companion! I can answer marketing and tech questions right now! What can I help with?');\n    \n    // Initialize event listeners\n    initEventListeners();\n    \n    // Log initialization\n    console.log('Marlin Chat Widget initialized successfully');\n  }\n\n  // Expose initialization function to global scope\n  window.initChatWidget = init;\n  \n  // Variables for closures\n  let config;\n  let elements;\n\n  // Auto-initialize if configuration exists\n  if (window.marlinChatConfig) {\n    init(window.marlinChatConfig);\n  }\n})(); "
  ],
  "mappings": "oBAOC,UAAW,CAEV,GAAI,OAAO,uBAAwB,CACjC,QAAQ,KAAK,6DAA6D,EAC1E,MACF,CAGA,OAAO,uBAAyB,GAKhC,IAAMA,EAAiB,CACrB,SAAU,eACV,MAAO,aACP,aAAc,UACd,WAAY,KACZ,YAAa,0DACb,MAAO,QACP,OAAQ,QACR,OAAQ,IACV,EAKA,SAASC,GAAe,CACtB,IAAMC,EAAU,SAAS,cAAc,OAAO,EAC9CA,EAAQ,GAAK,4BACbA,EAAQ,UAAY;AAAA;AAAA;AAAA,mBAGLC,EAAO,MAAM;AAAA,sBACVA,EAAO,MAAM;AAAA,iBAClBA,EAAO,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAsBDA,EAAO,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BA4CnBA,EAAO,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAW5BA,EAAO,MAAM;AAAA;AAAA;AAAA;AAAA,4BAIJA,EAAO,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAwCnBA,EAAO,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA0E3C,SAAS,KAAK,YAAYD,CAAO,CACnC,CAKA,SAASE,GAAuB,CAE9B,IAAMC,EAAS,SAAS,cAAc,KAAK,EAC3CA,EAAO,UAAY,6BAA6BF,EAAO,QAAQ,GAC/DE,EAAO,UAAYF,EAAO,WACxB,aAAaA,EAAO,UAAU,uCAC9B,6RACF,SAAS,KAAK,YAAYE,CAAM,EAGhC,IAAMC,EAAY,SAAS,cAAc,KAAK,EAC9CA,EAAU,UAAY,gCAAgCH,EAAO,QAAQ,GACrEG,EAAU,MAAM,QAAU,OAG1B,IAAMC,EAAS,SAAS,cAAc,KAAK,EAC3CA,EAAO,UAAY,4BACnBA,EAAO,UAAY;AAAA,6CACsBJ,EAAO,KAAK;AAAA;AAAA,MAKrD,IAAMK,EAAoB,SAAS,cAAc,KAAK,EACtDA,EAAkB,UAAY,8BAG9B,IAAMC,EAAiB,SAAS,cAAc,KAAK,EACnD,OAAAA,EAAe,UAAY,qCAC3BA,EAAe,UAAY;AAAA;AAAA;AAAA;AAAA;AAAA,MAQ3BH,EAAU,YAAYC,CAAM,EAC5BD,EAAU,YAAYE,CAAiB,EACvCF,EAAU,YAAYG,CAAc,EACpC,SAAS,KAAK,YAAYH,CAAS,EAE5B,CACL,OAAAD,EACA,UAAAC,EACA,kBAAAE,EACA,YAAaD,EAAO,cAAc,2BAA2B,EAC7D,MAAOE,EAAe,cAAc,2BAA2B,EAC/D,WAAYA,EAAe,cAAc,0BAA0B,CACrE,CACF,CAKA,SAASC,EAAWC,EAAMC,EAAO,YAAa,CAC5C,IAAMC,EAAU,SAAS,cAAc,KAAK,EAC5CA,EAAQ,UAAY,8BAA8BD,CAAI,GAGtDC,EAAQ,UAAYF,EAAK,QAAQ,MAAO,MAAM,EAE9CG,EAAS,kBAAkB,YAAYD,CAAO,EAC9CC,EAAS,kBAAkB,UAAYA,EAAS,kBAAkB,YACpE,CAKA,SAASC,GAAa,CACpB,IAAMC,EAAS,SAAS,cAAc,KAAK,EAC3CA,EAAO,UAAY,4BACnBA,EAAO,UAAY;AAAA;AAAA;AAAA;AAAA,MAKnBA,EAAO,GAAK,4BACZF,EAAS,kBAAkB,YAAYE,CAAM,EAC7CF,EAAS,kBAAkB,UAAYA,EAAS,kBAAkB,YACpE,CAKA,SAASG,GAAa,CACpB,IAAMD,EAAS,SAAS,eAAe,2BAA2B,EAC9DA,GACFA,EAAO,OAAO,CAElB,CAKA,SAASE,GAAe,CACJJ,EAAS,UAAU,MAAM,UAAY,QAGrDA,EAAS,UAAU,UAAU,OAAO,MAAM,EAC1C,WAAW,IAAM,CACfA,EAAS,UAAU,MAAM,QAAU,MACrC,EAAG,GAAG,IAENA,EAAS,UAAU,MAAM,QAAU,OACnC,WAAW,IAAM,CACfA,EAAS,UAAU,UAAU,IAAI,MAAM,EAEvCA,EAAS,MAAM,MAAM,CACvB,EAAG,EAAE,EAET,CAKA,SAASK,GAAe,CACtB,IAAIC,EAAY,aAAa,QAAQ,wBAAwB,EAE7D,OAAKA,IACHA,EAAY,uCAAuC,QAAQ,QAAS,SAASC,EAAG,CAC9E,IAAMC,EAAI,KAAK,OAAO,EAAI,GAAK,EAE/B,OADUD,IAAM,IAAMC,EAAKA,EAAI,EAAM,GAC5B,SAAS,EAAE,CACtB,CAAC,EACD,aAAa,QAAQ,yBAA0BF,CAAS,GAGnDA,CACT,CAKA,eAAeG,EAAYZ,EAAM,CAC/B,GAAKA,EAAK,KAAK,EAGf,CAAAD,EAAWC,EAAM,MAAM,EAGvBG,EAAS,MAAM,MAAQ,GAGvBC,EAAW,EAEX,GAAI,CACF,IAAMK,EAAYD,EAAa,EAG/B,QAAQ,IAAI,iCAAkC,CAC5C,QAASR,EACT,cAAeA,EAAK,OACpB,YAAa,OAAOA,EACpB,UAAWS,EACX,SAAUjB,EAAO,WACnB,CAAC,EAED,IAAMqB,EAAW,MAAM,MAAMrB,EAAO,YAAa,CAC/C,OAAQ,OACR,QAAS,CACP,eAAgB,kBAClB,EACA,KAAM,KAAK,UAAU,CACnB,QAASQ,EACT,UAAAS,CACF,CAAC,CACH,CAAC,EAKD,GAFA,QAAQ,IAAI,mBAAoBI,EAAS,MAAM,EAC/C,QAAQ,IAAI,yBAA0BA,EAAS,QAAQ,IAAI,cAAc,CAAC,EACtE,CAACA,EAAS,GAAI,CAEhB,IAAMC,EAAe,MAAMD,EAAS,KAAK,EACzC,QAAQ,MAAM,sBAAuBC,CAAY,EACjD,GAAI,CACF,IAAMC,EAAY,KAAK,MAAMD,CAAY,EACzC,QAAQ,MAAM,oBAAqBC,CAAS,EAC5CT,EAAW,EAGX,IAAMU,EAAeD,EAAU,SAAWA,EAAU,OAAS,UAAUF,EAAS,MAAM,IAAIA,EAAS,UAAU,GAC7Gd,EAAW,+BAA+BiB,CAAY,4BAA6B,WAAW,CAChG,OAASC,EAAY,CAEnB,QAAQ,MAAM,kCAAmCA,CAAU,EAC3DX,EAAW,EACXP,EAAW,8BAA8Bc,EAAS,MAAM,6BAA8B,WAAW,CACnG,CACA,MACF,CAGA,IAAMK,EAASL,EAAS,KAAK,UAAU,EACjCM,EAAU,IAAI,YAEpBb,EAAW,EACX,IAAMJ,EAAU,SAAS,cAAc,KAAK,EAC5CA,EAAQ,UAAY,uCACpBC,EAAS,kBAAkB,YAAYD,CAAO,EAE9C,IAAIY,EAAe,GAEnB,GAAI,CACF,OAAa,CACX,GAAM,CAAE,KAAAM,EAAM,MAAAC,CAAM,EAAI,MAAMH,EAAO,KAAK,EAC1C,GAAIE,EAAM,CACR,QAAQ,IAAI,iBAAiB,EAC7B,KACF,CAGA,IAAME,EAAQH,EAAQ,OAAOE,EAAO,CAAE,OAAQ,EAAK,CAAC,EACpD,QAAQ,IAAI,kBAAmB,KAAK,UAAUC,CAAK,CAAC,EAEhDA,EAAM,KAAK,IACbR,GAAgBQ,EAEhBpB,EAAQ,UAAYY,EAAa,QAAQ,MAAO,MAAM,EACtDX,EAAS,kBAAkB,UAAYA,EAAS,kBAAkB,aAEtE,CAGA,IAAMoB,EAAaJ,EAAQ,OAAO,EAC9BI,EAAW,KAAK,IAClB,QAAQ,IAAI,eAAgB,KAAK,UAAUA,CAAU,CAAC,EACtDT,GAAgBS,EAEhBrB,EAAQ,UAAYY,EAAa,QAAQ,MAAO,MAAM,GAInDA,EAAa,KAAK,IACrB,QAAQ,KAAK,4CAA4C,EACzDZ,EAAQ,UAAY,iJAGtB,QAAQ,IAAI,uBAAwBY,CAAY,CAClD,OAASU,EAAa,CACpB,QAAQ,MAAM,2BAA4BA,CAAW,EACrDtB,EAAQ,UAAY,6EACtB,CACF,OAASuB,EAAO,CACd,QAAQ,MAAM,yBAA0BA,CAAK,EAC7CnB,EAAW,EACXP,EAAW,wGAAyG,WAAW,CACjI,EACF,CAKA,SAAS2B,GAAqB,CAE5BvB,EAAS,OAAO,iBAAiB,QAASI,CAAY,EAGtDJ,EAAS,YAAY,iBAAiB,QAASI,CAAY,EAG3DJ,EAAS,WAAW,iBAAiB,QAAS,IAAM,CAClDS,EAAYT,EAAS,MAAM,KAAK,CAClC,CAAC,EAGDA,EAAS,MAAM,iBAAiB,WAAa,GAAM,CAC7C,EAAE,MAAQ,SACZS,EAAYT,EAAS,MAAM,KAAK,CAEpC,CAAC,CACH,CAKA,SAASwB,EAAKC,EAAa,CAAC,EAAG,CAE7BpC,EAAS,CAAE,GAAGH,EAAgB,GAAGuC,CAAW,EAG5CtC,EAAa,EACba,EAAWV,EAAqB,EAGhCM,EAAW,qCAAqC,EAGhD2B,EAAmB,EAGnB,QAAQ,IAAI,6CAA6C,CAC3D,CAGA,OAAO,eAAiBC,EAGxB,IAAInC,EACAW,EAGA,OAAO,kBACTwB,EAAK,OAAO,gBAAgB,CAEhC,GAAG",
  "names": [
    "DEFAULT_CONFIG",
    "injectStyles",
    "styleEl",
    "config",
    "createWidgetElements",
    "bubble",
    "container",
    "header",
    "messagesContainer",
    "inputContainer",
    "addMessage",
    "text",
    "role",
    "message",
    "elements",
    "showTyping",
    "typing",
    "hideTyping",
    "toggleWidget",
    "getSessionId",
    "sessionId",
    "c",
    "r",
    "sendMessage",
    "response",
    "responseText",
    "errorData",
    "errorMessage",
    "parseError",
    "reader",
    "decoder",
    "done",
    "value",
    "chunk",
    "finalChunk",
    "streamError",
    "error",
    "initEventListeners",
    "init",
    "userConfig"
  ]
}