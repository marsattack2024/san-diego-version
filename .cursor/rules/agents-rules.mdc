---
description: Rules for Building Agents
globs: 
alwaysApply: false
---
Based on my investigation of the agent routing system, here's a comprehensive breakdown of
   how it works:

  Agent Routing System Architecture

  1. System Overview

  The agent routing system in this project is designed to intelligently direct user messages
   to specialized agents based on content analysis. It consists of several interconnected
  components:

  ┌─────────────────┐      ┌─────────────────┐      ┌────────────────────┐
  │   AgentRouter   │──────▶   Agent Type    │──────▶   Specialized      │
  │                 │      │   Selection     │      │   Agent            │
  └─────────────────┘      └─────────────────┘      └────────────────────┘
          │                                                   │
          │                                                   │
          ▼                                                   ▼
  ┌─────────────────┐                              ┌────────────────────┐
  │  System Prompt  │                              │     Agent Tools    │
  │  Generation     │                              │                    │
  └─────────────────┘                              └────────────────────┘

  2. Core Components

  AgentRouter (lib/agents/agent-router.ts)

  - Central orchestrator for determining which agent handles a query
  - Contains scoring logic for keyword matching
  - Generates appropriate system prompts for each agent type
  - Implements two main methods:
    - routeMessage(): Determines the appropriate agent based on message content
    - getSystemPrompt(): Builds the system prompt for the selected agent

  BaseAgent (lib/agents/core/agent-base.ts)

  - Abstract class that all specialized agents extend
  - Implements common agent functionality
  - Processes messages by:
    a. Converting agent tools to AI SDK tools format
    b. Generating responses using OpenAI's API
    c. Handling tool calls and logging

  Agent Types (lib/agents/core/agent-types.ts)

  - Defines agent interfaces and types
  - Key types include AgentType, AgentTool, AgentMessage, and AgentContext
  - Provides utility functions for creating agent messages and contexts

  Specialized Agents

  - Each specialized agent extends BaseAgent with domain-specific capabilities
  - Currently implemented agents:
    - DefaultAgent: General-purpose assistant
    - CopywritingAgent: Specialized for marketing content
    - GoogleAdsAgent: Specialized for Google advertising
    - FacebookAdsAgent: Specialized for social media advertising
    - QuizAgent: Specialized for creating interactive quizzes

  3. Detailed Routing Flow

  flowchart TD
      A[User Message] --> B[AgentRouter]
      B -- User selected agent --> C[Use explicit selection]
      B -- Auto-routing --> D[Score message against keywords]
      D --> E{Score > threshold?}
      E -- Yes --> F[Use specialized agent]
      E -- No --> G[Use default agent]
      C --> H[Generate system prompt]
      F --> H
      G --> H
      H --> I[Process message with agent]
      I --> J[Return response]
      I --> K[Tool calls]
      K --> L[External resources]
      L --> I

  1. Message Routing Algorithm:
    - If user has explicitly selected a non-default agent, use that
    - For auto-routing, analyze the content of the last user message
    - Score the message against keywords associated with each agent
    - Higher scores for:
        - Multi-word keywords (2 points per word)
      - Keywords at the beginning of the message (5 bonus points)
      - Exact phrase matches (3 bonus points)
    - Route to specialized agent if score exceeds threshold (5)
    - Otherwise, route to the default agent
  2. System Prompt Generation:
    - Combines base prompt with specialized agent prompts
    - Adds tool descriptions and instructions
    - Includes instructions about DeepSearch availability
    - Adds requirement to mention tools used

  4. Agent Tools

  Agents can use various tools to enhance their capabilities:

  Core Tools

  - echoTool: Simple tool for testing
  - dateTimeTool: Provides current date and time information

  Web Interaction Tools

  - webScraperTool: Extracts content from URLs
  - urlDetectionTool: Identifies URLs in text
  - deepSearchTool: Uses Perplexity AI for in-depth research

  Knowledge Base Tools

  - vectorSearchTool: Searches vector database for relevant information
  - extractRelevantContext: Helper for formatting vector search results
  - createContextEnhancedPrompt: Enhances prompts with retrieved context

  5. Implementation Details

  AgentRouter Keywords

  Each specialized agent has associated keywords that trigger its selection:

  const AGENT_KEYWORDS: Record<AgentType, string[]> = {
    'default': [],
    'copywriting': ['copywriting', 'copy', 'website text', ...],
    'google-ads': ['google ads', 'google ad', 'adwords', ...],
    'facebook-ads': ['facebook ad', 'instagram ad', 'meta ad', ...],
    'quiz': ['quiz', 'question', 'test', 'assessment', ...]
  };

  Tool Integration

  Tools are integrated into agents using the AI SDK's tool format:

  const aiTools = this.tools.reduce((acc, t) => {
    acc[t.name] = tool({
      description: t.description,
      parameters: t.schema,
      execute: async (params) => {
        // Tool execution logic
        const result = await t.execute(params);
        return result;
      }
    });
    return acc;
  }, {} as Record<string, any>);

  6. UI Component: AgentSelector

  The user interface provides an AgentSelector component that allows users to explicitly
  select an agent:

  <DropdownMenu>
    <DropdownMenuTrigger asChild>
      <Button variant="outline">
        {selectedAgent?.name}
        <ChevronDownIcon />
      </Button>
    </DropdownMenuTrigger>
    <DropdownMenuContent>
      {agents.map((agent) => (
        <DropdownMenuItem
          key={agent.id}
          onSelect={() => setSelectedAgent(agent.id)}
        >
          {agent.name}
        </DropdownMenuItem>
      ))}
    </DropdownMenuContent>
  </DropdownMenu>

  7. Key Files and Their Functions

  8. System Architecture Diagram

  ┌──────────────────────────────────────────────────────┐
  │                     User Interface                    │
  │  ┌─────────────────┐            ┌─────────────────┐  │
  │  │  Agent Selector │            │  Chat Interface │  │
  │  └─────────────────┘            └─────────────────┘  │
  └──────────────────────────────────────────────────────┘
                         │                 ▲
                         ▼                 │
  ┌──────────────────────────────────────────────────────┐
  │                    Agent Router                       │
  │  ┌─────────────┐  ┌───────────────┐  ┌────────────┐  │
  │  │ Keyword     │  │ Scoring       │  │ System     │  │
  │  │ Matching    │──▶ Algorithm     │──▶ Prompt     │  │
  │  └─────────────┘  └───────────────┘  │ Generation │  │
  │                                      └────────────┘  │
  └──────────────────────────────────────────────────────┘
                              │
                              ▼
  ┌──────────────────────────────────────────────────────┐
  │                    Agent Processing                   │
  │  ┌─────────────┐  ┌───────────────┐  ┌────────────┐  │
  │  │ Default     │  │ Specialized   │  │ Tool       │  │
  │  │ Agent       │  │ Agents        │  │ Execution  │  │
  │  └─────────────┘  └───────────────┘  └────────────┘  │
  └──────────────────────────────────────────────────────┘
                              │
                              ▼
  ┌──────────────────────────────────────────────────────┐
  │                    External Services                  │
  │  ┌─────────────┐  ┌───────────────┐  ┌────────────┐  │
  │  │ Web         │  │ Vector        │  │ Perplexity │  │
  │  │ Scraping    │  │ Search        │  │ API        │  │
  │  └─────────────┘  └───────────────┘  └────────────┘  │
  └──────────────────────────────────────────────────────┘

  9. Summary

  The agent routing system provides a flexible architecture for directing user queries to
  specialized agents based on content analysis. It combines keyword matching, specialized
  agents, and tool integration to deliver appropriate responses.

  Key advantages:
  1. Automatic routing based on content
  2. Specialized capabilities for different domains
  3. Tool integration for enhanced capabilities
  4. Extensible architecture for adding new agents

  This system enables more targeted and effective responses to user queries, while
  maintaining the ability to fall back to a general-purpose agent when no specialized agent
  is appropriate.
