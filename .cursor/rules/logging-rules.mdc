---
description: Enhanced Logging System for Next.js with Vector Search - Best Practices
globs: ["**/*.ts", "**/*.tsx"]
alwaysApply: false
---

# Enhanced Logging System - Best Practices

## Core Principles

1. **Environment-Aware**: Different formats for development vs. production
2. **Structured Data**: JSON format with consistent fields
3. **Special Formatting**: Enhanced readability for complex data like document results
4. **Performance Tracking**: Automatic monitoring of slow operations
5. **Correlation**: Request/session IDs for cross-service tracing

## Base Logger Usage

```typescript
import { logger } from '@/lib/logger';

// Debug (only in development)
logger.debug('Detailed information', { context: 'value' });

// Info (filtered in production unless marked important)
logger.info('Normal event occurred', { userId: '123' });
logger.info('Critical event occurred', { orderId: 'abc', important: true });

// Warning (always shown)
logger.warn('Potential issue detected', { resourceId: '123', usage: 95 });

// Error (always shown with stack trace)
logger.error('Operation failed', { error: new Error('Database error') });

// Structured log format
logger.info('Operation completed', logger.formatLogStructure({
  operation: 'document_creation',
  documentId: '123',
  duration: 150
}));
```

## Vector Search Logging

```typescript
import { logger, tracedVectorOperation } from '@/lib/logger/vector-logger';

// Log embedding creation
logger.logEmbeddingCreation('doc-123', { 
  contentType: 'article',
  dimensions: 1536
});

// Log vector search results
logger.logVectorResults(
  'user query text',
  documentResults, // array of retrieved documents
  {
    averageSimilarity: 0.68,
    highestSimilarity: 0.72,
    lowestSimilarity: 0.63,
    retrievalTimeMs: 150
  },
  'session-123'
);

// Performance tracking wrapper
const results = await tracedVectorOperation(
  'document_search',
  () => performSearchOperation(query),
  {
    query,
    sessionId: 'session-123',
    params: { threshold: 0.65 }
  }
);
```

## Development vs. Production Logs

### Development Format (Human-Readable)

```
[INFO] 2025-03-08T12:34:56.789Z Vector search completed

  {
    "queryLength": 42,
    "resultCount": 3,
    "durationMs": 150
  }

  Documents:
    [1] Marketing Guide (73%)
        The essential guide to Facebook marketing starts with understanding your audience...
    [2] Ad Strategies (68%)
        When creating Google Ads campaigns, focus on these key performance indicators...
```

### Production Format (Machine-Parseable)

```json
{"level":"info","message":"Vector search completed","operation":"vector_results","queryLength":42,"resultCount":3,"averageSimilarity":0.68,"durationMs":150,"important":true,"timestamp":"2025-03-08T12:34:56.789Z"}
```

## Common Logging Patterns

### 1. API Endpoint Logging

```typescript
// Route handler with logging
export async function POST(req: Request) {
  const startTime = performance.now();
  const requestId = req.headers.get('x-request-id') || crypto.randomUUID();
  
  try {
    logger.info('API request received', {
      path: '/api/chat',
      method: 'POST',
      requestId
    });
    
    // Process request...
    const result = await processRequest(req);
    
    // Log completion
    const duration = Math.round(performance.now() - startTime);
    logger.info('API request completed', {
      path: '/api/chat',
      method: 'POST',
      requestId,
      durationMs: duration,
      important: duration > 1000 // Mark slow responses as important
    });
    
    return Response.json(result);
  } catch (error) {
    logger.error('API request failed', {
      path: '/api/chat',
      method: 'POST',
      requestId,
      error,
      durationMs: Math.round(performance.now() - startTime)
    });
    
    return Response.json({ error: 'Internal server error' }, { status: 500 });
  }
}
```

### 2. Document Result Formatting

```typescript
// Format document results for logging
const formattedDocs = documents.map(doc => ({
  id: doc.id,
  title: doc.metadata?.title || `Doc ${doc.id}`,
  preview: doc.content.substring(0, 100) + '...',
  similarity: Math.round(doc.similarity * 100)
}));

logger.info('Documents retrieved', {
  queryId: '123',
  count: formattedDocs.length,
  documents: formattedDocs
});
```

### 3. Error Handling

```typescript
try {
  // Risky operation
  await riskyOperation();
} catch (error) {
  logger.error('Failed to perform operation', {
    operationType: 'database_query',
    error, // Pass the full error object, not just the message
    correlationId: 'req-123',
    important: true
  });
  
  // Re-throw or handle as needed
}
```

## Best Practices

1. **Mark Important Logs**: Use `important: true` to ensure critical logs appear in production
2. **Use Structured Context**: Always include relevant context as structured data
3. **Full Error Objects**: Pass error objects, not just messages, for better stack traces
4. **Correlation IDs**: Include request/session IDs in all logs
5. **Session Context**: Include user ID and session information when available
6. **Performance Flags**: Automatically mark slow operations as important
7. **Security**: Never log sensitive information (passwords, tokens, etc.)
8. **Document Formatting**: Use specialized formatters for complex data like document results
9. **Filter Development Logs**: Use debug level for verbose development-only logs
10. **Standardize Log Structure**: Follow consistent patterns across different components

## Monitoring and Troubleshooting

1. **Filter by Operation**: Use `operation: 'operation_name'` for grouping related logs
2. **Correlation Tracing**: Track request flow using the `requestId` or `sessionId` fields
3. **Performance Analysis**: Use `durationMs` fields to identify slow operations
4. **Error Rates**: Monitor error logs to identify problematic components
5. **User Impact**: Filter logs by `userId` to troubleshoot user-specific issues

---

### Recommended VS Code Logger Snippets

```json
{
  "Logger Debug": {
    "prefix": "logd",
    "body": ["logger.debug('$1', { $2 });"],
    "description": "Add debug log statement"
  },
  "Logger Info": {
    "prefix": "logi",
    "body": ["logger.info('$1', { $2 });"],
    "description": "Add info log statement"
  },
  "Logger Warning": {
    "prefix": "logw",
    "body": ["logger.warn('$1', { $2 });"],
    "description": "Add warning log statement"
  },
  "Logger Error": {
    "prefix": "loge",
    "body": ["logger.error('$1', { error, $2 });"],
    "description": "Add error log statement"
  },
  "Logger Important Info": {
    "prefix": "logii",
    "body": ["logger.info('$1', { important: true, $2 });"],
    "description": "Add important info log statement"
  },
  "Trace Operation": {
    "prefix": "logtrace",
    "body": [
      "const startTime = performance.now();",
      "try {",
      "  // Perform operation",
      "  $1",
      "  ",
      "  const duration = Math.round(performance.now() - startTime);",
      "  logger.info('$2 completed', { ",
      "    durationMs: duration,",
      "    $3",
      "    important: duration > $4",
      "  });",
      "} catch (error) {",
      "  logger.error('$2 failed', {",
      "    error,",
      "    durationMs: Math.round(performance.now() - startTime),",
      "    $3",
      "  });",
      "  throw error;",
      "}"
    ],
    "description": "Add trace operation pattern"
  }
}
```