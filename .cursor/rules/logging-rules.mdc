---
description: Logging rules for app. Read this anytime working on logging
globs: 
alwaysApply: false
---
# Logging Rules for Cursor

## Overview

These logging rules are designed for a lightweight, efficient logging system tailored to a small team (~250 users). The system focuses on critical operational data, reduces noise, and adapts to development and production needs.

## Core Principles

1. **Minimalist Design**: Log only essential metrics and events.
2. **Category-Based Sampling**: Use defined categories with specific sampling rates.
3. **Performance Focus**: Track operation durations and flag slow/timeout cases.
4. **Security**: Avoid logging sensitive data (e.g., full queries, credentials).
5. **Environment-Specific**: Adjust detail level for development vs. production.

## Log Categories and Sampling

```typescript
const categories = {
  AUTH: 'auth',     // 20% sampling in production
  CHAT: 'chat',     // 10% sampling in production
  TOOLS: 'tools',   // 10% sampling in production
  LLM: 'llm',       // 10% sampling in production
  SYSTEM: 'system'  // 100% sampling in all environments
};
```

## Logging Formats

### 1. Production Logging

#### Startup Information
- Single log with essential service status.
```typescript
üîµ Application started
  environment=production
  region=iad1
  version=a1b2c3d
  services=database:configured,ai:configured
```

#### RAG Operations
- Track all RAG operations with unique IDs and performance metrics.
```typescript
// Normal operation
üîµ RAG operation completed
  ragOperationId=rag-1679665432123-x7y9z
  durationMs=850
  results=3
  slow=false

// Slow operation (>2s)
üü† RAG operation completed
  ragOperationId=rag-1679665432123-x7y9z
  durationMs=2150
  results=5
  slow=true
  important=true

// Timeout (>10s)
üî¥ RAG operation timed out
  ragOperationId=rag-1679665432123-x7y9z
  durationMs=10023
  query=How can I reduce my cost per lead... // Truncated for security
  important=true
```

#### Errors
- Include full context for debugging.
```typescript
üî¥ Database query failed
  operation=user_preferences
  error=Connection timeout
  durationMs=5000
  important=true
```

#### API Requests
- Log status and performance, sample slow operations.
```typescript
üîµ API request completed
  path=/api/chat
  method=POST
  requestId=req-123
  durationMs=150
  status=200
```

### 2. Development Logging

#### Startup Information
- Include additional context.
```typescript
üîµ Application started
  environment=development
  services=database:configured,ai:configured
  development.port=3000
  development.logLevel=debug
```

#### Chat/LLM Operations
- Detailed metrics for debugging.
```typescript
üîµ Chat completion
  durationMs=750
  model=gpt-4o
  tokens=1250
  chatId=3027b6e7-dc03-465d-9d1c-bff0aa21297b
```

#### RAG Operations
- Include query and result details.
```typescript
üîµ RAG operation completed
  ragOperationId=rag-1679665432123-x7y9z
  durationMs=850
  results=3
  query=How can I reduce my cost per lead...
```

## Best Practices

### 1. RAG Operation Monitoring
- Assign unique `ragOperationId` to all RAG operations.
- Log `durationMs`, `results`, and `slow` status.
- Flag operations as `important=true` if `durationMs > 5000`.
- Log timeouts (`durationMs > 10000`) with truncated query context.

### 2. Performance Thresholds
```typescript
const THRESHOLDS = {
  RAG_TIMEOUT: 10000,      // 10 seconds
  SLOW_OPERATION: 2000,    // 2 seconds
  LOG_THRESHOLD: 1000,     // Log operations > 1s in production
  IMPORTANT_THRESHOLD: 5000 // Mark important if > 5s
};
```

### 3. Error Handling
- Log full error details with operation context.
```typescript
try {
  await ragOperation();
} catch (error) {
  logger.error('RAG operation failed', {
    category: 'tools',
    operation: 'vector_search',
    error,
    important: true,
    ragOperationId: 'rag-123'
  });
}
```

### 4. Security
- Never log full user queries in production (truncate to first 50 chars).
- Mask user IDs (e.g., `5c80...20e9`) and session IDs.
- Exclude credentials and API keys from logs.

### 5. Sampling
- In production, sample logs by category (e.g., 10% for CHAT, 100% for SYSTEM).
- Always log operations exceeding `LOG_THRESHOLD` (1000ms).

## Implementation Patterns

### 1. API Endpoint Logging
```typescript
export async function POST(req: Request) {
  const requestId = crypto.randomUUID();
  const startTime = performance.now();

  logger.info('API request received', {
    category: 'chat',
    path: '/api/chat',
    method: 'POST',
    requestId
  });

  try {
    const result = await processRequest(req);
    const durationMs = Math.round(performance.now() - startTime);

    logger.info('API request completed', {
      category: 'chat',
      path: '/api/chat',
      method: 'POST',
      requestId,
      durationMs,
      status: 200,
      important: durationMs > THRESHOLDS.IMPORTANT_THRESHOLD
    });

    return Response.json(result);
  } catch (error) {
    const durationMs = Math.round(performance.now() - startTime);
    logger.error('API request failed', {
      category: 'chat',
      path: '/api/chat',
      method: 'POST',
      requestId,
      error,
      durationMs,
      important: true
    });
    return Response.json({ error: 'Internal server error' }, { status: 500 });
  }
}
```

### 2. RAG Operation Logging
```typescript
async function performRAG(query: string, ragOperationId: string) {
  const startTime = performance.now();
  try {
    const results = await vectorSearch(query);
    const durationMs = Math.round(performance.now() - startTime);

    logger.info('RAG operation completed', {
      category: 'tools',
      ragOperationId,
      durationMs,
      results: results.length,
      slow: durationMs > THRESHOLDS.SLOW_OPERATION,
      important: durationMs > THRESHOLDS.IMPORTANT_THRESHOLD
    });

    return results;
  } catch (error) {
    const durationMs = Math.round(performance.now() - startTime);
    if (durationMs > THRESHOLDS.RAG_TIMEOUT) {
      logger.error('RAG operation timed out', {
        category: 'tools',
        ragOperationId,
        durationMs,
        query: query.substring(0, 50) + '...',
        important: true
      });
    } else {
      logger.error('RAG operation failed', {
        category: 'tools',
        ragOperationId,
        error,
        durationMs,
        important: true
      });
    }
    throw error;
  }
}
```

## Migration from Old Rules

### Remove
- ‚ùå Full environment variable dumps (e.g., `allEnvKeys`).
- ‚ùå Node.js/npm configuration details.
- ‚ùå Development tool status (e.g., VSCode injection).
- ‚ùå Verbose human-readable document previews in production.

### Keep
- ‚úÖ RAG operation metrics (`durationMs`, `results`).
- ‚úÖ API performance metrics (`status`, `durationMs`).
- ‚úÖ Error conditions with context.
- ‚úÖ Slow operation warnings (`slow=true`).

### Add
- ‚úÖ Category-based sampling (e.g., `category: 'chat'`).
- ‚úÖ Unique operation IDs (e.g., `ragOperationId`).
- ‚úÖ Timeout tracking with thresholds.

## Monitoring Guidelines

1. **Performance**: Filter by `durationMs` to identify slow operations.
2. **Errors**: Track `error` logs by category for issue detection.
3. **RAG Health**: Monitor `ragOperationId` for timeouts and result counts.
4. **API Usage**: Analyze `requestId` logs for request patterns.

---

These rules streamline your logging approach, aligning with the README's focus on efficiency, essential metrics, and small-team management. Let me know if you'd like to refine any part further!