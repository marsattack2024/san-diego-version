---
description: Logging rules for app. Read this anytime working on logging issues.
globs: 
alwaysApply: false
---
Core Principles
Minimalist Design: Log only essential metrics and events for production. Use debug level for verbose tracing only in development.
Structured & Categorized: Use consistent fields (level, category, durationMs, IDs) and defined categories.
Category-Based Sampling: Apply defined sampling rates in production, but always keep critical logs.
Performance Focus: Track operation durations, flag slow/important/timeout cases based on thresholds.
Security First: Avoid logging sensitive data (no full queries/inputs in prod, no cookies/credentials, mask IDs).
Consolidated Logs: Aim for one clear log entry per logical operation completion (e.g., one log for RAG completion).
Environment-Specific: debug logs are filtered out in production. Log more detail (e.g., non-sensitive params, truncated intermediate results) in development only.
Log Categories and Sampling (Production)
TypeScript

const categories = {
  AUTH: 'auth',     // Authentication events (20% sampling)
  CHAT: 'chat',     // Chat interactions, routing (10% sampling)
  TOOLS: 'tools',   // RAG, Deep Search, Scraping, other tool ops (10% sampling)
  LLM: 'llm',       // Language model interactions (10% sampling)
  CACHE: 'cache',   // Cache operations (Hits: 10% sampling, Misses/Errors: 100%)
  SYSTEM: 'system'  // Critical system events, startup (100% sampling)
};

// Log Levels: 🔵=INFO, 🟡=WARN, 🔴=ERROR. Use `debug` level for dev-only verbose logs.
Sampling Strategy (Production)
Log entries are first candidates based on category sampling rates.
However, all ERROR level logs (🔴) and all logs marked important: true are always kept, regardless of the initial sampling decision.
Logging Formats & Examples
(Note: Examples show key fields; actual implementation might include more context like requestId or specific operation IDs)

1. Production Logging
Startup Information
TypeScript

🔵 Application started
  level=info
  category=system
  environment=production
  region=iad1
  version=a1b2c3d
  services=database:configured,ai:configured
  important=false // Startup is routine unless it fails
RAG Operations
TypeScript

// Normal operation (< SLOW_OPERATION)
🔵 RAG operation completed
  level=info
  category=tools
  ragOperationId=rag-abc
  durationMs=850
  resultsCount=3
  slow=false
  important=false
  status=completed // Or e.g., no_matches
  fromCache=false

// Cache Hit
🔵 RAG operation completed
  level=info
  category=tools
  ragOperationId=rag-xyz
  durationMs=50 // Typically very fast
  resultsCount=3 // Count from cache
  slow=false
  important=false
  status=completed_from_cache // Specific status
  fromCache=true

// Slow operation (> SLOW_OPERATION, < IMPORTANT_THRESHOLD)
🟡 RAG operation completed // Yellow for Warning
  level=warn
  category=tools
  ragOperationId=rag-def
  durationMs=2150
  resultsCount=5
  slow=true // Marked as slow
  important=false // Not important yet
  status=completed
  fromCache=false

// Important operation (> IMPORTANT_THRESHOLD)
🟠 RAG operation completed // Orange for Important Warning
  level=warn
  category=tools
  ragOperationId=rag-ghi
  durationMs=5150
  resultsCount=2
  slow=true
  important=true // Marked as important
  status=completed
  fromCache=false

// Timeout (> RAG_TIMEOUT)
🔴 RAG operation timed out
  level=error
  category=tools
  ragOperationId=rag-jkl
  durationMs=10023
  queryPreview=How can I reduce... // Truncated query preview ONLY for error/timeout
  important=true
Errors
TypeScript

🔴 Database query failed
  level=error
  category=system // Or specific like 'auth'
  operation=user_preferences
  error="Connection timeout" // Error message
  durationMs=5000
  important=true
API Requests
TypeScript

// Normal API request completion
🔵 API request completed
  level=info
  category=chat // Or relevant category based on path
  path=/api/chat
  method=POST
  requestId=req-123
  durationMs=150
  status=200
  slow=false
  important=false

// Slow API request completion
🟡 API request completed
  level=warn
  category=chat
  path=/api/chat
  method=POST
  requestId=req-456
  durationMs=2500
  status=200
  slow=true
  important=false // Not important unless > IMPORTANT_THRESHOLD
Cache Operations
TypeScript

// Cache Hit (Sampled 10%)
🔵 Cache get
  level=info // Or debug if too noisy
  category=cache
  key=global:rag:abc
  hit=true
  durationMs=45

// Cache Miss (Logged 100%)
🟡 Cache get // Warn encourages checking cache effectiveness
  level=warn
  category=cache
  key=global:rag:def
  hit=false
  durationMs=30
2. Development Logging (debug level active)
Startup Information
TypeScript

🔵 Application started
  level=info
  category=system
  environment=development
  services=database:configured,ai:configured
  development.port=3000
  development.logLevel=debug
Chat/LLM Operations
TypeScript

🔵 Starting LLM request
  level=debug // Details for tracing
  category=llm
  model=gpt-4o
  chatId=abc
  systemPromptSize=13527 // Log prompt size for perf analysis

🔵 LLM generation completed successfully
  level=info // Key completion event
  category=llm
  model=gpt-4o
  chatId=abc
  durationMs=13472 // LLM generation time
  tokens=2746 // Example token usage
Agent Routing
TypeScript

🔵 Agent routing scores // Debug only
  level=debug
  category=chat
  scores={"default":0, "quiz":2}
  highestScore=2
  threshold=5

🔵 Using default agent // Info for final decision
  level=info
  category=chat
  reason="No agent scored above threshold"
  finalAgentId=default
RAG Operations (Dev)
TypeScript

// Can include full query and more details in dev
🔵 RAG operation completed
  level=info
  category=tools
  ragOperationId=rag-xyz
  durationMs=850
  resultsCount=3
  slow=false
  important=false
  status=completed
  fromCache=false
  query="How can I reduce my cost per lead?" // Full query OK in dev
  // resultPreview="Document #1 snippet..." // Optional truncated results
Best Practices
RAG & External API Monitoring:
Assign unique IDs (ragOperationId, deepSearchId, etc.).
Log durationMs, outcome (status field like 'completed', 'completed_from_cache', 'no_matches', 'timeout', 'failed'), slow status, important status.
For failures/timeouts, log level=error, important=true, include truncated queryPreview.
Consolidate: Aim for ONE completion log per operation.
Performance Thresholds:
TypeScript

const THRESHOLDS = {
  RAG_TIMEOUT: 10000,      // 10 seconds (triggers error log)
  SLOW_OPERATION: 2000,    // 2 seconds (triggers level=warn, slow=true)
  // Log basic info (respecting sampling); add detailed timing/flags only if durationMs > 1000
  LOG_THRESHOLD: 1000,
  IMPORTANT_THRESHOLD: 5000 // Mark important=true if durationMs > 5000 (and level=warn)
};
Error Handling:
Use try/catch. Log errors at level=error with important=true.
Include category, operation, error.message, relevant IDs.
TypeScript

// Example
try {
  await someOperation();
} catch (error) {
  logger.error('Operation failed', {
    category: 'tools', operation: 'specific_task', error: error.message, important: true, /* relevantId: '...' */
  });
}
Security:
Never log full user queries/inputs in production. Use truncated queryPreview (max ~50 chars) ONLY on error/timeout.
Never log authentication cookies or sensitive headers.
Mask sensitive IDs (userId, sessionId).
Exclude credentials, API keys, full environment variables.
Sampling & Filtering:
Apply category sampling rates in production.
Always log all ERROR level events and all events marked important: true, regardless of category sampling.
Configure production environments to filter out and discard debug level logs.
Use debug Level Appropriately:
Use level=debug for verbose tracing useful ONLY during development (intermediate steps, params, variable dumps, repeated checks).
Apply this especially to internal helper functions or wrappers around external tools (e.g., detailed steps within Perplexity/Deep Search API handlers).
Do not use debug for operational status, warnings, or errors.
Logging Sub-Processes (e.g., Web Scraping):
Log the start, completion (with durationMs, outcome/status), and errors of distinct sub-processes like web scraping initiated during a request.
Use appropriate categories (e.g., 'tools') and levels (info for start/complete, error for failures).
Logging Data Validation/Correction:
Use level=warn (🟡/🟠) to log significant data validation issues or automatic corrections applied to responses (e.g., missing required sections).
Logging Long-Lived Connections (SSE):
Avoid Misleading Durations: Standard framework request logs for SSE show total connection time, not latency. Document this in the route handler code.
Recommended Logging: Use custom logs (level=info) to mark SSE connection established (with connectionId) and SSE connection closed (with connectionId and clear connectionDurationMs). Log SSE-specific errors at level=error.
Implementation Patterns
1. API Endpoint Logging (Example)
TypeScript

// Assume edgeLogger exists and handles levels, structure, etc.
export async function POST(req: Request) {
  const requestId = crypto.randomUUID(); startTime = performance.now(); path = '/api/chat'; category = 'chat';
  edgeLogger.debug('API request received', { category, path, method: 'POST', requestId });
  try {
    const result = await processRequest(req); durationMs = Math.round(performance.now() - startTime);
    isSlow = durationMs > THRESHOLDS.SLOW_OPERATION; isImportant = durationMs > THRESHOLDS.IMPORTANT_THRESHOLD;
    edgeLogger.log(isSlow ? 'warn' : 'info', 'API request completed', {
      category, path, method: 'POST', requestId, durationMs, status: 200, slow: isSlow, important: isImportant
    });
    return Response.json(result);
  } catch (error) {
    durationMs = Math.round(performance.now() - startTime);
    edgeLogger.error('API request failed', {
      category, path, method: 'POST', requestId, error: error.message, durationMs, status: 500, important: true
    });
    return Response.json({ error: 'Internal server error' }, { status: 500 });
  }
}
2. RAG Operation Logging (Example)
TypeScript

// Assume logger exists and handles levels, structure, etc.
async function performRAG(query: string, userId: string): Promise<RagResult[]> {
  const ragOperationId = `rag-${crypto.randomUUID().substring(0, 8)}`; startTime = performance.now(); category = 'tools';
  logger.debug('Starting RAG operation', { category, ragOperationId, userId: maskUserId(userId) });
  try {
    // !!! Add Cache Check Logic Here First !!!
    // const cached = tryGetFromCache(query);
    // if (cached) {
    //   logger.info('RAG operation completed', { category, ragOperationId, /* ... cache hit fields ... */ status: 'completed_from_cache', fromCache: true });
    //   return cached.documents;
    // }

    const results = await vectorSearch(query); // Actual RAG logic if cache miss
    durationMs = Math.round(performance.now() - startTime); isSlow = durationMs > THRESHOLDS.SLOW_OPERATION; isImportant = durationMs > THRESHOLDS.IMPORTANT_THRESHOLD;
    status = results.length > 0 ? 'completed' : 'no_matches'; // Determine status

    // Log single completion event
    logger.log(isSlow ? 'warn' : 'info', 'RAG operation completed', {
      category, ragOperationId, durationMs, resultsCount: results.length, slow: isSlow, important: isImportant, status, fromCache: false, userId: maskUserId(userId)
    });
    // Cache results if needed: cacheResults(query, results, { durationMs });
    return results;
  } catch (error) {
    durationMs = Math.round(performance.now() - startTime); isTimeout = durationMs > THRESHOLDS.RAG_TIMEOUT;
    logger.error(isTimeout ? 'RAG operation timed out' : 'RAG operation failed', {
      category, ragOperationId, durationMs, error: error.message, queryPreview: query.substring(0, 50) + '...', important: true, userId: maskUserId(userId)
    });
    throw error; // Re-throw error after logging
  }
}
// Note: Separate logic/logging needed for cache hits ('completed_from_cache').
// Ensure only ONE completion log (cache hit OR actual search) is emitted per call.

Keep / Refine
✅ RAG/Tool operation metrics (durationMs, result counts, status).
✅ API performance metrics (status, durationMs).
✅ Error conditions with structured context.
✅ Slow/Important operation warnings (slow=true, important=true based on thresholds).
✅ Masked User/Session IDs where necessary for context.
Add / Emphasize
✅ Consistent level field (info, warn, error, debug).
✅ Consistent category field for filtering and sampling.
✅ Unique operation IDs (ragOperationId, requestId, etc.).
✅ Timeout tracking and specific logging.
✅ Use of debug level for dev-only verbose tracing.
✅ Clear distinction between slow (warning) and important (needs attention) flags based on thresholds.
✅ Specific guidance for SSE logging.
✅ Guidance on logging sub-processes and validation steps.
Monitoring Guidelines
Errors: Monitor level=error logs. Group by category and operation to identify hotspots.
Performance: Monitor level=warn logs. Track logs where slow=true or important=true. Analyze durationMs trends by category/operation.
RAG/Tool Health: Filter by category=tools. Monitor ragOperationId (or similar) for high durationMs, timeouts (level=error), or low resultsCount. Check status field.
API Usage: Analyze API request logs (requestId, path, status, durationMs) for patterns, errors, and performance.
Cache Effectiveness: Monitor category=cache logs. Calculate hit ratios (hit=true vs hit=false counts). Investigate high miss rates (level=warn on misses). Monitor RAG logs for status=completed_from_cache.