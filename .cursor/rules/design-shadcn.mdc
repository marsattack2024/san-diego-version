---
description: ShadCN UI Implementation Rules for AI Agents
globs: 
alwaysApply: false
---
# UI Design System Guidelines                            │ │
│ │  2                                                           │ │
│ │  3  ## Material Design Components (MDC) Rules                │ │
│ │  4                                      │ │
│ │  5  This document outlines the design system principles f    │ │
│ │    or our chat application to ensure consistency, accessi    │ │
│ │    bility, and developer efficiency.                         │ │
│ │  6                                                           │ │
│ │  7  ## 1. Component Architecture                             │ │
│ │  8                                                           │ │
│ │  9  ### Core                                  │ │
│ │ 10  - **Chat Container**: `components/chat.tsx` serves as    │ │
│ │     the main container and orchestrator                      │ │
│ │ 11  - **Message Components**: `components/message.tsx` an    │ │
│ │    d `components/messages.tsx` handle rendering conversat    │ │
│ │    ions                                                      │ │
│ │ 12  - **Input Components**: `components/multimodal-input.    │ │
│ │    tsx` provides user interaction                            │ │
│ │ 13  - **Artifact Components**: Components prefixed with `    │ │
│ │    artifatent types                   │ │
│ │ 14                                                           │ │
│ │ 15  ### Hierarchy                                            │ │
│ │ 16  - Follow the established component hierarchy with con    │ │
│ │    tainers → layout → functional components                  │ │
│ │ 17  - Always compose from primitive UI components in `com    │ │
│ │    ponents/ui/*`                                             │ │
│ │ 18                                                           │ │
│ │ 19  ## 2. Styling Principles                                 │ │
│ │ 20                                                           │ │
│ │ 21  ### CSS Guidelines                                       │ │
│ │ 22  - Use Tailwind utility classes for styling               │ │
│ │ 23  - Follow mobile-first responsive design patterns         │ │
│ │ 24  - Use CSS variables defined in `globals.css` for them    │ │
│ │    ing                                                       │ │
│ │ 25  - Maintain dark/light mode compatibility                 │ │
│ │ 26                                                           │ │
│ │ 27  ### Design Tokens                                        │ │
│ │ 28  - Colors: Use semantic color tokens defined in `tailw    │ │
│ │    ind.config.ts`                                            │ │
│ │ 29  - Spacing: Follow 4px grid system (0.25rem increments    │ │
│ │    )                                                         │ │
│ │ 30  - Typography: Use defined font sizes and weights         │ │
│ │ 31  - Shadows: Use predefined shadow values for elevation    │ │
│ │ 32                                                           │ │
│ │ 33  ## 3. State Management                                   │ │
│ │ 34                                                           │ │
│ │ 35  - Prefer React hooks over globalssible     │ │
│ │ 36  - Use the AI SDK's `useChat` hook for chat functional    │ │
│ │    ity                                                       │ │
│ │ 37  - Follow context pattern for shared state                │ │
│ │ 38  - Keep state close to where it's used                    │ │
│ │ 39                                                           │ │
│ │ 40  ## 4. Accessibility                                      │ │
│ │ 41                                                           │ │
│ │ 42  - Maintain WCAG 2.1 AA compliance                        │ │
│ │ 43  - Ensure proper contrast ratios (4.5:1 minimum)          │ │
│ │ 44  - Provide keyboard navigation for all interactive ele    │ │
│ │    ments                                                     │ │
│ │ 45  - Use semantic HTML elements                             │ │
│ │ 46  - Include proper ARIA attributes                         │ │
│ │ 47                                                           │ │
│ │ 48  ## 5. Component Development Rules                        │ │
│ │ 49                                                           │ │
│ │ 50  - Create single-responsibility components                │ │
│ │ 51  - Document props with TypeScript interfaces              │ │
│ │ 52  - Use React.memo() for performance-critical component    │ │
│ │    s                                                         │ │
│ │ 53  - Follow established naming conventions:                 │ │
│ │ 54    - PascalCase for components                            │ │
│ │ 55    - camelCase for functions and variables                │ │
│ │ 56    - kebab-case for CSS classes                           │ │
│ │ 57                                                           │ │
│ │ 58  ## 6. Layout Patterns                                    │ │
│ │ 59                                                           │ │
│ │ 60  - Use CSS Grid for page layouts                          │ │
│ │ 61  - Use Flexbox for component layouts                      │ │
│ │ 62  - Maintain consistent spacing (margin/padding)           │ │
│ │ 63  - Follow mobile-first responsive design approach         │ │
│ │ 64                                                           │ │
│ │ 65  ## 7. Interaction Patterns                               │ │
│ │ 66                                                           │ │
│ │ 67  - Provide visual feedback for all user actions           │ │
│ │ 68  - Maintain consistent hover/focus states                 │ │
│ │ 69  - Use transitions for state changes (300ms standard d    │ │
│ │    uration)                                                  │ │
│ │ 70  - Follow established navigation patterns                 │ │
│ │ 71                                                           │ │
│ │ 72  ## 8. Performance Considerations                         │ │
│ │ 73                                                           │ │
│ │ 74  - Lazy load components when appropriate                  │ │
│ │ 75  - Use image optimization for performance                 │ │
│ │ 76  - Keep bundle size minimal                               │ │
│ │ 77  - Optimize for Core Web Vitals                           │ │
│ │ 78                                                           │ │
│ │ 79  ## 9. Integration Guidelines                             │ │
│ │ 80                                                           │ │
│ │ 81  When integrating with backend or AI:                     │ │
│ │ 82  - Use the established AI SDK patterns                    │ │
│ │ 83  - Follow streaming response handling patterns            │ │
│ │ 84  - Maintain error state handling as shown in existing     │ │
│ │    components                                                │ │
│ │ 85  - Use proper loading states                              │ │
│ │ 86                                                           │ │
│ │ 87  By following these guidelines, we ensure a consistent    │ │
│ │    , maintainable, and high-quality user interface across    │ │
│ │     the application.                                         │ │
│ │ 88 \ No newline at end of file           