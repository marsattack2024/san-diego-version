---
description: cursor rules for organizing the entire app based on the provided file structure
globs: 
alwaysApply: true
---
Reorganization Plan

  Here's a comprehensive plan to organize your project
  structure for better clarity and maintainability:

  1. Directory Structure Goals

  - Eliminate duplicate directories (/src, /utils vs /lib)
  - Create a clear separation of concerns
  - Simplify imports with consistent paths
  - Make the enhanced chat the primary chat interface

  2. New Directory Structure

  /
  ├── app                    # Next.js app router pages
  │   ├── api                # API routes
  │   ├── auth               # Auth pages
  │   ├── chat               # Main chat interface (moved
  from enhanced-chat)
  │   └── error.tsx          # Error page
  ├── components             # UI components
  │   ├── auth               # Auth components
  │   ├── chat               # Chat components (renamed from
  enhanced-)
  │   ├── layout             # Layout components
  │   ├── shared             # Shared components
  │   └── ui                 # UI primitives
  ├── lib                    # Core utilities & business
  logic
  │   ├── agents             # Agent implementations
  │   ├── chat               # Chat logic
  │   ├── logger             # Unified logging system
  │   ├── supabase           # Supabase client
  │   └── vector             # Vector search functionality
  ├── config                 # Application config
  ├── contexts               # React contexts
  ├── hooks                  # React hooks
  ├── public                 # Static assets
  ├── scripts                # Build/Dev scripts
  ├── stores                 # State stores (Zustand)
  ├── styles                 # Global styles
  ├── types                  # TypeScript types
  └── docs                   # Documentation (renamed from
  architecture-docs)

  3. Implementation Steps

  Step 1: Prepare New Directory Structure

  # Create new directories
  mkdir -p lib/agents/core lib/agents/prompts
  lib/agents/specialized lib/agents/tools
  mkdir -p lib/chat
  mkdir -p lib/logger
  mkdir -p lib/vector
  mkdir -p docs

  Step 2: Consolidate Agents

  # Move agents from src to lib
  cp -r src/agents/core/* lib/agents/core/
  cp -r src/agents/prompts/* lib/agents/prompts/
  cp -r src/agents/specialized/* lib/agents/specialized/
  cp -r src/agents/tools/* lib/agents/tools/
  cp src/agents/index.ts lib/agents/

  Step 3: Consolidate Logging

  # Create a unified logging system in lib/logger
  mv utils/logger.ts lib/logger/base-logger.ts
  mv utils/client-logger.ts lib/logger/client-logger.ts
  mv utils/vector-logger.ts lib/logger/vector-logger.ts
  mv utils/ai-logger.ts lib/logger/ai-logger.ts
  mv src/utils/server-logger.ts lib/logger/server-logger.ts
  mv src/utils/edge-logger.ts lib/logger/edge-logger.ts

  # Create a unified logger index file
  touch lib/logger/index.ts

  Step 4: Consolidate Vector Search

  # Move vector search functionality to lib/vector
  cp -r utils/vector/* lib/vector/
  cp -r src/utils/vector/* lib/vector/

  Step 5: Rename and Move Enhanced Chat to Main Chat

  # Make enhanced chat the main chat interface
  mkdir -p app/chat
  cp app/enhanced-chat/page.tsx app/chat/

  # Rename components to remove "enhanced-" prefix
  # (Will need to update imports and references)

  Step 6: Rename Components for Consistency

  # Create a script to rename enhanced- components and update
   imports
  touch scripts/rename-components.js

  Components to rename:
  - enhanced-chat.tsx → chat.tsx
  - enhanced-chat-renderer.tsx → chat-renderer.tsx
  - enhanced-message-item.tsx → message-item.tsx
  - enhanced-message-list.tsx → message-list.tsx
  - enhanced-chat-context.tsx → chat-context.tsx
  - useEnhancedChat.ts → useChat.ts

  Step 7: Move Documentation

  # Rename architecture-docs to docs
  mv architecture-docs docs

  Step 8: Clean Up Redundant Directories

  # After confirming everything works, remove redundant 
  directories
  rm -rf src
  rm -rf utils
  rm -rf middleware
  rm -rf app/enhanced-chat

  Step 9: Update Imports

  # Create a script to update all import paths
  touch scripts/update-all-imports.js

  4. Import Path Updates

  Common import changes:
  - @/src/agents/* → @/lib/agents/*
  - @/utils/* → @/lib/logger/* or @/lib/*
  - @/components/chat/enhanced-* → @/components/chat/*
  - @/contexts/enhanced-chat-context →
  @/contexts/chat-context
  - @/hooks/useEnhancedChat → @/hooks/useChat

  5. Testing Strategy

  1. Implement changes in smaller batches:
    - Start with non-UI changes (logger, vector)
    - Then refactor components with careful testing
    - Update app routes last
  2. Test key functionality after each batch:
    - Vector search
    - Chat functionality
    - Authentication
    - API endpoints

  6. Execution Order

  1. Create new directory structure
  2. Move non-UI utilities (logger, vector)
  3. Move and rename agent code
  4. Rename and refactor components
  5. Update app routes
  6. Update imports
  7. Clean up redundant files
  8. Final testing