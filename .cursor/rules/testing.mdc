---
description: anytime you're instructed with making tests or having to test functions and features, you'll use these standards and our refactored plan for testing. 
globs: 
alwaysApply: false
---

# Testing Rules for San Diego Application

## Setup & Structure

1. All tests must use Vitest as the primary testing framework
2. Follow the mirrored directory structure when creating new tests:
   - `/tests/unit/` for isolated component/module tests
   - `/tests/integration/` for tests across components
   - `/tests/helpers/` for shared testing utilities

## Core Principles

1. **Mock dependencies before importing them**
   ```javascript
   // CORRECT
   vi.mock('@/lib/dependency', () => ({ method: vi.fn() }));
   import { testedFunction } from '@/lib/tested-module';
   
   // INCORRECT
   import { testedFunction } from '@/lib/tested-module';
   vi.mock('@/lib/dependency', () => ({ method: vi.fn() }));
   ```

2. **Reset mocks in beforeEach for test isolation**
   ```javascript
   beforeEach(() => {
     vi.resetAllMocks();
     mockLogger.reset();
   });
   ```

3. **Use helper utilities for common mocking scenarios**
   ```javascript
   import { setupLoggerMock, mockLogger } from '@/tests/helpers/mock-logger';
   setupLoggerMock(); // Call BEFORE importing code that logs
   ```

## Mock Implementation Guidelines

1. **External Services**
   - Use factory functions for ESM modules
   - Leverage mock implementations from `tests/helpers/mock-clients.ts`

2. **Common Mocking Patterns**
   - Use `vi.stubGlobal('fetch', mockFetch)` for fetch API
   - Mock Supabase with chainable methods (from, select, eq)
   - Use in-memory store pattern for Redis client mocks
   - Always mock the logger with `setupLoggerMock()`

3. **Type Safety**
   - Use `as unknown as Type` for mocks when TypeScript complains
   - Use `expect.objectContaining<Partial<Interface>>({})` for typed assertions

## Test Structure

1. Organize tests in this order:
   ```javascript
   // 1. Imports
   import { describe, expect, it, beforeEach, vi } from 'vitest';
   import { setupLoggerMock } from '@/tests/helpers/mock-logger';

   // 2. Mocks (BEFORE importing module under test)
   setupLoggerMock();
   vi.mock('@/lib/dependency', () => ({}));

   // 3. Import module under test
   import { TestedModule } from '@/lib/tested-module';

   // 4. Test suite with beforeEach and tests
   describe('TestedModule', () => {
     beforeEach(() => {
       vi.resetAllMocks();
     });

     it('should do something', () => {
       // Arrange, Act, Assert
     });
   });
   ```

2. Follow AAA pattern (Arrange-Act-Assert) within test cases

## Logging Standards

1. Mock the logger before importing any modules that use it
2. Reset the logger in `beforeEach`
3. Assert log calls with `expect(mockLogger.level).toHaveBeenCalledWith(...)`
4. Use `mockLogger.hasLogsMatching` for flexible checks

## Common Issues & Solutions

1. If you encounter hoisting issues, ensure mocks are defined before imports
2. For ESM modules, use factory functions with vi.mock
3. For test interference, reset all mocks in beforeEach
4. For globals like fetch, use vi.stubGlobal and unstub in afterEach
5. For type errors, use type assertions with 'as unknown as Type'

## Priority Testing Areas

Focus test implementation on current gaps:
1. Zustand store functionality (chat-store.ts)
2. UI component interactions
3. Chat history synchronization
4. Chat setup service
5. API route integration tests

## Running Tests

```bash
npm test          # Run all tests
npm run test:watch # Run in watch mode
npm run test:ui    # Run with Vitest UI
npm run test:coverage # Run with coverage report
```