---
description: 
globs: 
alwaysApply: true
---
Okay, let's generate a revised and corrected version of the Next.js 15 Route Handler Standards documentation. This version incorporates our final understanding: the withAuth wrapper handles awaiting params internally, and the handler receives resolved params and user within the context object.

This output should serve as the definitive guide for developers or AI agents working on API routes.

Next.js 15 API Route Handler Standards & Patterns (Corrected: April 4, 2025)
1. Goal
This document outlines the mandatory standardized patterns for creating API route handlers (app/api/.../route.ts) in our Next.js 15 application. Adhering to these patterns ensures consistency, maintainability, security, proper logging, error handling, and compliance with Next.js 15 requirements.

2. Core Requirements (Apply to MOST Routes)
Unless explicitly noted (e.g., specific Node.js runtime exceptions), all API route handlers MUST:

Runtime & Dynamic Behavior: Declare export const runtime = 'edge'; AND export const dynamic = 'force-dynamic'; at the top of the file.
Standard Types: Use standard Web API types: Request for the incoming request and Promise<Response> for the return type. Avoid NextRequest and NextResponse.
CORS Handling: Wrap every returned Response object (success or error) using handleCors(response, request, true) from @/lib/utils/http-utils.
Response Utilities: Use the standardized response functions (successResponse, errorResponse, unauthorizedError, validationError, notFoundError) from @/lib/utils/route-handler instead of creating responses manually.
Logging: Utilize edgeLogger from @/lib/logger/edge-logger for all logging (info, debug, warn, error), including an operationId and relevant context, following logging-rules.mdc. Remove console.log.
Error Handling: Implement try...catch blocks for main logic, log errors comprehensively using edgeLogger (including stack trace for unexpected errors), and return standardized error responses using the response utilities and handleCors.
3. Choosing the Right Pattern
The primary pattern depends on whether user authentication is required for the route.

Pattern A: Required Authentication (Use withAuth / withAdminAuth)
Use this pattern for all API routes that mandate a user to be logged in (or logged in as an admin).

Key Features:

Uses the withAuth or withAdminAuth wrappers from lib/auth/with-auth.ts.
The wrapper handles the initial supabase.auth.getUser() check and validation.
The wrapper handles checking the is_admin JWT claim (for withAdminAuth).
The wrapper handles awaiting dynamic route parameters (params) internally.
The wrapper provides the validated user object and resolved params together within the context argument passed to your handler.
Handler Signature:

Your handler function MUST match the AuthenticatedRouteHandler (or AdminAuthenticatedRouteHandler) type signature:

TypeScript

import type { User } from '@supabase/supabase-js';

// Type definition (may be imported from with-auth.ts or a shared types file)
export type AuthenticatedContext = {
  params?: Record<string, string>; // Params are RESOLVED by the wrapper
  user: User;
};

export type AuthenticatedRouteHandler = (
  request: Request,
  context: AuthenticatedContext
) => Promise<Response>;

// Admin version uses the same signature
export type AdminAuthenticatedRouteHandler = AuthenticatedRouteHandler;
Example (withAuth):

TypeScript

// app/api/some-protected-route/[id]/route.ts
import { createRouteHandlerClient } from '@/utils/supabase/route-client'; // Use EXISTING utility
import { edgeLogger } from '@/lib/logger/edge-logger';
import { LOG_CATEGORIES } from '@/lib/logger/constants';
import { successResponse, errorResponse, validationError } from '@/lib/utils/route-handler';
import { handleCors } from '@/lib/utils/http-utils';
import { withAuth, type AuthenticatedRouteHandler, type AuthenticatedContext } from '@/lib/auth/with-auth';
// Route Parameter types are primarily for documentation/clarity here,
// as the wrapper provides the resolved params object.
import type { IdParam } from '@/lib/types/route-handlers';

export const runtime = 'edge';
export const dynamic = 'force-dynamic';

// Define handler matching AuthenticatedRouteHandler
const GET_Handler: AuthenticatedRouteHandler = async (request, context) => {
    // Destructure user and resolved params from context
    const { user, params } = context;
    const resourceId = params?.id; // Access resolved params DIRECTLY (NO await needed here)

    const operationId = `auth_get_${Math.random().toString(36).substring(2, 8)}`;
    edgeLogger.info('Handling authenticated GET request', { category: LOG_CATEGORIES.SYSTEM, operationId, userId: user.id, resourceId });

    if (!resourceId) { // Example validation
        const errRes = validationError('Resource ID is required');
        return handleCors(errRes, request, true);
    }

    try {
        // Client needed only for DB operations AFTER auth check
        const supabase = await createRouteHandlerClient();

        // Your logic here, using user.id and resourceId
        // RLS policies enforced automatically by Supabase client based on user
        const { data, error } = await supabase.from('some_table').select('*').eq('id', resourceId).eq('user_id', user.id);

        if (error) {
            edgeLogger.error('DB error', { category: LOG_CATEGORIES.DB, operationId, error: error.message });
            const errRes = errorResponse('Database error', error.message);
            return handleCors(errRes, request, true);
        }

        const successRes = successResponse({ data });
        return handleCors(successRes, request, true);

    } catch (error) {
        edgeLogger.error('Unexpected error', { category: LOG_CATEGORIES.SYSTEM, operationId, error, important: true });
        const errRes = errorResponse('Server error', error);
        return handleCors(errRes, request, true);
    }
};

// Wrap the handler
export const GET = withAuth(GET_Handler);

// For admin routes, use: export const POST = withAdminAuth(POST_Handler);
// The AdminAuthenticatedRouteHandler uses the SAME signature as AuthenticatedRouteHandler
Pattern B: No Authentication / Optional / Custom Auth
Use this pattern for public endpoints, debug routes, or routes where authentication is checked conditionally within the handler logic, or uses a non-standard method (e.g., API Key).

Key Features:

Uses standard Next.js direct function export signature.
Handles params manually using await.
Creates Supabase client manually using the existing utility createRouteHandlerClient from utils/supabase/route-client.ts.
Performs supabase.auth.getUser() check manually if needed.
Handler Signature:

TypeScript

async function METHOD(
  request: Request,
  context?: { params?: Promise<Record<string, string>> } // Params are a Promise here
): Promise<Response>
(Use specific types like IdParam from @/lib/types/route-handlers for context where applicable)

Example:

TypeScript

// app/api/some-public-route/[id]/route.ts
import { createRouteHandlerClient } from '@/utils/supabase/route-client'; // Use EXISTING utility
import { edgeLogger } from '@/lib/logger/edge-logger';
import { LOG_CATEGORIES } from '@/lib/logger/constants';
import { successResponse, errorResponse, notFoundError } from '@/lib/utils/route-handler';
import { handleCors } from '@/lib/utils/http-utils';
import type { IdParam } from '@/lib/types/route-handlers';

export const runtime = 'edge';
export const dynamic = 'force-dynamic';

export async function GET(
    request: Request,
    { params }: IdParam // Use standard context type for dynamic routes
): Promise<Response> {
    const operationId = `public_get_${Math.random().toString(36).substring(2, 8)}`;

    try {
        // MUST await params before use when not using withAuth
        const { id: resourceId } = await params;

        edgeLogger.info('Handling public GET request', { category: LOG_CATEGORIES.SYSTEM, operationId, resourceId });

        const supabase = await createRouteHandlerClient(); // Create client manually

        // Optional: Check if a user happens to be logged in
        // const { data: { user } } = await supabase.auth.getUser();
        // if (user) { /* Modify query/response based on user */ }

        // Your logic here...
        const { data, error } = await supabase.from('public_table').select('*').eq('id', resourceId).maybeSingle();

        if (error) {
             edgeLogger.error('DB error', { category: LOG_CATEGORIES.DB, operationId, error: error.message });
            const errRes = errorResponse('Database error', error.message);
            return handleCors(errRes, request, true);
        }
        if (!data) {
            const errRes = notFoundError('Resource not found');
            return handleCors(errRes, request, true);
        }

        const successRes = successResponse({ data });
        return handleCors(successRes, request, true);

    } catch (error) {
        edgeLogger.error('Unexpected error', { category: LOG_CATEGORIES.SYSTEM, operationId, error, important: true });
        const errRes = errorResponse('Server error', error);
        return handleCors(errRes, request, true);
    }
}
4. Common Utilities Checklist
Ensure you are using the correct, existing standardized utilities:

Authentication Wrappers: withAuth, withAdminAuth (@/lib/auth/with-auth) - Use for required auth (Pattern A).
Supabase Client Utility: createRouteHandlerClient (@/utils/supabase/route-client) - Use inside Pattern A handlers (after auth) or manually in Pattern B.
Response Utilities: successResponse, errorResponse, etc. (@/lib/utils/route-handler).
CORS Utility: handleCors (@/lib/utils/http-utils).
Logging Utility: edgeLogger (@/lib/logger/edge-logger).
Type Definitions: IdParam, etc. (@/lib/types/route-handlers), AuthenticatedRouteHandler, AuthenticatedContext (defined with withAuth or shared).
5. Serverless Runtime Exceptions
These routes use export const runtime = 'nodejs'; for specific reasons and do not follow the edge standard fully, but should still use standard types, response utils, logging, and CORS handling where possible:

app/api/perplexity/route.ts
app/api/profile/update-summary/route.ts
app/api/agent-chat/route.ts (If exists and requires Node.js)
6. Instructions for Developers / Agents
Identify Auth Requirement: Determine if the route strictly requires user authentication/admin status.
Choose Pattern:
If auth is required, use Pattern A (withAuth / withAdminAuth).
If auth is not required, optional, or uses custom logic (API key, etc.), use Pattern B.
Apply Core Requirements: Ensure runtime = 'edge', dynamic = 'force-dynamic', standard Request/Promise<Response> types, handleCors on all returns, and standard logging/error handling are implemented.
Use Utilities: Leverage the correct response utilities and the existing Supabase client utility (utils/supabase/route-client.ts). Do NOT create new client utilities.
Handle Params Correctly: Access resolved context.params synchronously within withAuth handlers; use await params in Pattern B handlers.
Refactor Non-Compliant Routes: Systematically update any remaining routes that do not adhere to these standards.