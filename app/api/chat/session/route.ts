import { createRouteHandlerClient } from '@/lib/supabase/route-client';
import { edgeLogger } from '@/lib/logger/edge-logger';
import { successResponse, errorResponse, validationError, unauthorizedError } from '@/lib/utils/route-handler';
import { handleCors } from '@/lib/utils/http-utils';
import { LOG_CATEGORIES } from '@/lib/logger/constants';
import type { User } from '@supabase/supabase-js'; // Keep for manual auth check
import { type Session } from '@supabase/supabase-js'; // Keep
import { z } from 'zod'; // Keep for validation

// Declare edge runtime
export const runtime = 'edge';
export const dynamic = 'force-dynamic';

// Zod schema for POST request body validation
const CreateSessionSchema = z.object({
    title: z.string().optional(),
    agent_id: z.string().optional(),
    deep_search_enabled: z.boolean().optional()
});

// --- POST Handler (Pattern B - Direct Export) ---
export async function POST(request: Request): Promise<Response> { // Direct export
    const operationId = `post_session_${Math.random().toString(36).substring(2, 10)}`;

    try {
        // Manual Auth Check
        const supabase = await createRouteHandlerClient();
        const { data: { user }, error: authError } = await supabase.auth.getUser();

        if (authError || !user) {
            edgeLogger.warn('Authentication required for POST session', {
                category: LOG_CATEGORIES.AUTH,
                operationId,
                error: authError?.message
            });
            const errRes = unauthorizedError('Authentication required');
            return handleCors(errRes, request, true);
        }
        const userId = user.id;

        // Validate Request Body
        let body;
        try {
            body = await request.json();
        } catch (e) {
            const errRes = validationError('Invalid JSON body');
            return handleCors(errRes, request, true);
        }
        const validationResult = CreateSessionSchema.safeParse(body);
        if (!validationResult.success) {
            const errRes = validationError('Invalid request body', validationResult.error.format());
            return handleCors(errRes, request, true);
        }
        const { title, agent_id, deep_search_enabled } = validationResult.data;

        edgeLogger.info('Creating new chat session', {
            category: LOG_CATEGORIES.CHAT,
            operationId,
            userId: userId.substring(0, 8),
            title: title,
            agent_id: agent_id
        });

        // Insert new session into the database
        // Generate session_id if 'id' wasn't provided in schema (adjusting schema might be better)
        // For now, assume sd_sessions auto-generates session_id or use UUID
        const { data: newSession, error: insertError } = await supabase
            .from('sd_chat_sessions')
            .insert({
                user_id: userId,
                title: title || 'New Chat',
                agent_id: agent_id,
                deep_search_enabled: deep_search_enabled || false
                // created_at, updated_at usually handled by DB default
                // session_id might be auto-generated by DB trigger or default
            })
            .select() // Select the newly inserted row
            .single();

        if (insertError) {
            edgeLogger.error('Error creating chat session', {
                category: LOG_CATEGORIES.DB,
                operationId,
                userId: userId.substring(0, 8),
                error: insertError.message
            });
            const errRes = errorResponse('Failed to create chat session', insertError);
            return handleCors(errRes, request, true);
        }

        if (!newSession) {
            edgeLogger.error('Session data unexpectedly null after insert', { operationId, userId: userId.substring(0, 8) });
            const errRes = errorResponse('Failed to retrieve session after creation', null, 500);
            return handleCors(errRes, request, true);
        }

        edgeLogger.info('Successfully created chat session', {
            category: LOG_CATEGORIES.CHAT,
            operationId,
            userId: userId.substring(0, 8),
            sessionId: newSession.id
        });

        // Return the newly created session data
        const response = successResponse(newSession);
        return handleCors(response, request, true);

    } catch (error) {
        const errorMsg = error instanceof Error ? error.message : String(error);
        edgeLogger.error('Unexpected error creating chat session', {
            category: LOG_CATEGORIES.SYSTEM,
            operationId,
            error: errorMsg
        });
        const errRes = errorResponse('Unexpected error creating session', error, 500);
        return handleCors(errRes, request, true);
    }
}

// --- GET Handler (Pattern B - Direct Export) ---
export async function GET(request: Request): Promise<Response> { // Direct export
    const operationId = `get_sessions_${Math.random().toString(36).substring(2, 10)}`;

    try {
        // Manual Auth Check
        const supabase = await createRouteHandlerClient();
        const { data: { user }, error: authError } = await supabase.auth.getUser();

        if (authError || !user) {
            edgeLogger.warn('Authentication required for GET sessions', {
                category: LOG_CATEGORIES.AUTH,
                operationId,
                error: authError?.message
            });
            const errRes = unauthorizedError('Authentication required');
            return handleCors(errRes, request, true);
        }
        const userId = user.id;

        // Extract pagination params from URL
        const url = new URL(request.url);
        const pageParam = url.searchParams.get('page');
        const pageSizeParam = url.searchParams.get('pageSize');

        const page = pageParam ? parseInt(pageParam, 10) : 1;
        const pageSize = pageSizeParam ? parseInt(pageSizeParam, 10) : 20; // Default page size
        const offset = (page - 1) * pageSize;

        // Validate pagination params
        if (isNaN(page) || page < 1) {
            const errRes = validationError('Invalid page number');
            return handleCors(errRes, request, true);
        }
        if (isNaN(pageSize) || pageSize < 1 || pageSize > 100) { // Add upper limit
            const errRes = validationError(`Invalid page size (must be 1-100)`);
            return handleCors(errRes, request, true);
        }

        edgeLogger.info('Fetching user chat sessions', {
            category: LOG_CATEGORIES.CHAT,
            operationId,
            userId: userId.substring(0, 8),
            page,
            pageSize
        });

        // Fetch sessions for the user (RLS enforced)
        const { data: sessions, error: fetchError } = await supabase
            .from('sd_chat_sessions')
            .select('id, title, created_at, updated_at, agent_id, deep_search_enabled')
            .eq('user_id', userId)
            .order('updated_at', { ascending: false })
            .range(offset, offset + pageSize - 1);

        if (fetchError) {
            edgeLogger.error('Error fetching chat sessions', {
                category: LOG_CATEGORIES.DB,
                operationId,
                userId: userId.substring(0, 8),
                error: fetchError.message
            });
            const errRes = errorResponse('Failed to fetch chat sessions', fetchError);
            return handleCors(errRes, request, true);
        }

        edgeLogger.info('Successfully fetched chat sessions', {
            category: LOG_CATEGORIES.CHAT,
            operationId,
            userId: userId.substring(0, 8),
            count: sessions?.length || 0,
            page,
            pageSize
        });

        // Return sessions wrapped in a standard structure if desired, or just the array
        const response = successResponse({
            sessions: sessions || [],
            meta: { count: sessions?.length || 0 } // Example metadata
        });
        return handleCors(response, request, true);

    } catch (error) {
        const errorMsg = error instanceof Error ? error.message : String(error);
        edgeLogger.error('Unexpected error fetching chat sessions', {
            category: LOG_CATEGORIES.SYSTEM,
            operationId,
            error: errorMsg
        });
        const errRes = errorResponse('Unexpected error fetching sessions', error, 500);
        return handleCors(errRes, request, true);
    }
}

// Remove exports that used withAuth
// export const POST = withAuth(POST_Handler);
// export const GET = withAuth(GET_Handler); 